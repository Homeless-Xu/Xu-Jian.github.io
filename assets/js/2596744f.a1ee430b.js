"use strict";(self.webpackChunkblog_never_del=self.webpackChunkblog_never_del||[]).push([[90],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>v});var r=t(7294);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,r,l=function(e,n){if(null==e)return{};var t,r,l={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var p=r.createContext({}),s=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=s(e.components);return r.createElement(p.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,l=e.mdxType,i=e.originalType,p=e.parentName,c=a(e,["components","mdxType","originalType","parentName"]),u=s(t),v=l,g=u["".concat(p,".").concat(v)]||u[v]||d[v]||i;return t?r.createElement(g,o(o({ref:n},c),{},{components:t})):r.createElement(g,o({ref:n},c))}));function v(e,n){var t=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var i=t.length,o=new Array(i);o[0]=u;var a={};for(var p in n)hasOwnProperty.call(n,p)&&(a[p]=n[p]);a.originalType=e,a.mdxType="string"==typeof e?e:l,o[1]=a;for(var s=2;s<i;s++)o[s]=t[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},540:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>a,toc:()=>s});var r=t(7462),l=(t(7294),t(3905));const i={sidebar_position:1718,title:"\ud83c\udfaa-7\ufe0f\u20e3 NET \ud83c\udf10-8\ufe0f\u20e3 VPN \u279c Wireguard"},o="VPN \u2736 Wireguard",a={unversionedId:"\ud83c\udfaa-7\ufe0f\u20e3 NET \ud83c\udf10-8\ufe0f\u20e3 VPN \u279c Wireguard",id:"\ud83c\udfaa-7\ufe0f\u20e3 NET \ud83c\udf10-8\ufe0f\u20e3 VPN \u279c Wireguard",title:"\ud83c\udfaa-7\ufe0f\u20e3 NET \ud83c\udf10-8\ufe0f\u20e3 VPN \u279c Wireguard",description:"\ud83d\udd35 Goal",source:"@site/docs/\ud83c\udfaa-7\ufe0f\u20e3 NET \ud83c\udf10-8\ufe0f\u20e3 VPN \u279c Wireguard.md",sourceDirName:".",slug:"/\ud83c\udfaa-7\ufe0f\u20e3 NET \ud83c\udf10-8\ufe0f\u20e3 VPN \u279c Wireguard",permalink:"/\ud83c\udfaa-7\ufe0f\u20e3 NET \ud83c\udf10-8\ufe0f\u20e3 VPN \u279c Wireguard",draft:!1,tags:[],version:"current",sidebarPosition:1718,frontMatter:{sidebar_position:1718,title:"\ud83c\udfaa-7\ufe0f\u20e3 NET \ud83c\udf10-8\ufe0f\u20e3 VPN \u279c Wireguard"},sidebar:"defaultSidebar",previous:{title:"\ud83c\udfaa-7\ufe0f\u20e3 NET \ud83c\udf10-7\ufe0f\u20e3 VPN \u279c Choose",permalink:"/\ud83c\udfaa-7\ufe0f\u20e3 NET \ud83c\udf10-7\ufe0f\u20e3 VPN \u279c Design"},next:{title:"\ud83c\udfaa-7\ufe0f\u20e3 NET \ud83c\udf10-9\ufe0f\u20e3 VPN \u279c Netmaker",permalink:"/\ud83c\udfaa-7\ufe0f\u20e3 NET \ud83c\udf10-9\ufe0f\u20e3 VPN \u279c Netmaker"}},p={},s=[],c={toc:s};function d(e){let{components:n,...t}=e;return(0,l.kt)("wrapper",(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"vpn--wireguard"},"VPN \u2736 Wireguard"),(0,l.kt)("p",null,"\ud83d\udd35 Goal"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"vps_ubuntu(vpn.srv) == (vpn.cli)Ros_router\n\n    under ros. a lot vlan.\n        we want visit homelab vlan. via vps. \n            because homelab no public internet ip.\n")),(0,l.kt)("p",null,"\ud83d\udd35 wireguard  must know "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"all node is even (both can be server or client)\n\nclient: send     vpn connect request  \nserver: accept   vpn connect request  \n\nonly need one node(client node) join another node (server node ).  and vpn is builded! \n    no need both node send request to each other.\n        means server node. no need join client node.\n\nusually \n    server:  have public ip \n    client:  no public ip \n    let client node to join server node. \n")),(0,l.kt)("p",null,"\ud83d\udd35 How build wireguaed vpn "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"\ud83d\udd36 server enable ip forward \n\n\ud83d\udd36 vpn role \n\n    one server node. \n    lot client node.\n        let client node join same server node. \n\n\n\ud83d\udd36 Peer \n\n    peer is node.   \n    one peer one node. \n\n    server need add lots client peer. (one client one peer )\n    client need add one  server peer\n\n\n\ud83d\udd36 Peer.key \n\n    all node need genrate a pair key. \n        server node need add all client public key. one client peer add one client public key. \n        client node need add one server public key.\n")),(0,l.kt)("p",null,"\ud83d\udd35 ip forward "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"\ud83d\udd36 check \n\n    cat /proc/sys/net/ipv4/ip_forward\n        1 ok \n        0 deny \n\n\ud83d\udd36 enable \n\n    vi /etc/sysctl.conf\n    add\n    net.ipv4.ip_forward=1\n")),(0,l.kt)("p",null,"\ud83d\udd35 VPN Server Basic config"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"\ud83d\udd36 install                            apt install wireguard -y\n\n\ud83d\udd36 generate private key               wg genkey > private\n\ud83d\udd36 use private gnerate public:        wg pubkey < private \n\n\ud83d\udd36 create basic confug \n\n    vi /etc/wireguard/wg-vps.conf\n\n    [Interface]\n    Address = 10.214.214.214/32\n    ListenPort = 4455\n    PrivateKey = yJore1MNmgAAYFunP8DGRl16/9qVFvm83VJVDGDeCUg=\n\n\n\n\ud83d\udd36 enable firewall \n\n    apt install ufw -y \n    systemctl enable ufw\n    systemctl start ufw\n    ufw allow 4455 \n\n\n\ud83d\udd36 config nic autostart\n    \n    sudo systemctl enable wg-quick@wg-vps\n    sudo systemctl start wg-quick@wg-vps\n    sudo systemctl restart wg-quick@wg-vps\n\n    sudo systemctl status wg-quick@wg-vps\n\n    ip a \n\n\n\ud83d\udd36 check status \n\n    VPS ~ wg\n    interface: wg-vps\n    public key: fOa79C1HXltCoiSujJK9zIlx2hRD8eqSWL5lr+5TuSI=\n    private key: (hidden)\n    listening port: 4455\n")),(0,l.kt)("p",null,"\ud83d\udd35 VPN Client - Ubuntu \ud83d\udcaf"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"    vi /etc/wireguard/wg-dkp.conf\n\n\n\n[Interface]\nAddress = 10.214.214.140/32\nPrivateKey = IAnGIuJI+ly3czJ0E1ZKy08CuqVUIOymGPb5ob5PNWw=\nListenPort = 19629\n\n[Peer]\nPublicKey = fOa79C1HXltCoiSujJK9zIlx2hRD8eqSWL5lr+5TuSI=\nAllowedIPs = 10.214.214.0/24\nEndpoint = 172.93.42.232:4455\nPersistentKeepalive = 25\n\n\n\n    sudo systemctl enable wg-quick@wg-vps\n    sudo systemctl start wg-quick@wg-vps\n    sudo systemctl restart wg-quick@wg-vps\n\n    sudo systemctl status wg-quick@wg-dkt\n\n    ip a \n")),(0,l.kt)("p",null,"\ud83d\udd35 VPN Client - Ubuntu Ros: "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"\ud83d\udd36 general key & nic \n\n    wireguard >> new >> VPN-WG-ROS.. \n    this will create a private and a public key .\n\n\n\ud83d\udd36 set ip \n\n    10.214.214.11/32  VPN-WG-ROS\n\n\n\ud83d\udd36 connect vps  \n\n    wireguard >> peer >> add \n\n        interface:   VPN-WG-ROS\n        public key:  vps`s public key. \n        endpiunt:    vps`s internet ip \n        port:        use wg cmd check in vps.  \n        allow address:  empty \n\n    not . vpn is connect. but not ping other vpn node! yet. \n")),(0,l.kt)("p",null,"\ud83d\udd35 keep alive "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"add this. or it will disconnect. \n\nPersistentKeepalive = 25\n")),(0,l.kt)("p",null,"\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\n\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\n\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35"),(0,l.kt)("p",null,"\ud83d\udd35 Design VPN network \u2705"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"server   wg vpn ip \u279c 10.214.214.214/32\n\nclient_1 wg vpn ip \u279c 10.214.214.11/32\nclient_2 wg vpn ip \u279c 10.214.214.22/32\nclient_3 wg vpn ip \u279c 10.214.214.33/32\n\n    one vpn node only need one ip.  no need use /24.  that will confuse you. \n")),(0,l.kt)("p",null,"\ud83d\udd35 VPN Desc "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"if you have a working handshake. it means vpn works. \na working handshake. no need config any allowed ips. \n\nworking vpn. not means you can ping node use vpn ip. \nthis function need config allowed ip.\n")),(0,l.kt)("p",null,"\ud83d\udd35 Allowed IPS \u279c VPN part "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"if vpn client & vpn server need ping each other use vpn ip. \nthis need config on both client peer. and server peer. \n\nallowed ip means. what traffic can use wireguard vpn.\n\n\n\ud83d\udd36 Server peer_client_11  Allowed IPS  \u279c add client_11 `s vpn ip   \u279c 10.214.214.11/32\n\ud83d\udd36 server peer_client_22  Allowed IPS  \u279c add client_22 `s vpn ip   \u279c 10.214.214.22/32\n\ud83d\udd36 server peer_client_33  Allowed IPS  \u279c add client_33 `s vpn ip   \u279c 10.214.214.33/32\n        this let 10.214.214.xx/32 can use vpn tunnel.   let server can ping 10.214.214.xx\n\n\n\ud83d\udd36 Client_11 peer         Allowed IPS  \u279c add server `s vpn ip:     \u279c 10.214.214.214/32\n\ud83d\udd36 Client_22 peer         Allowed IPS  \u279c add server `s vpn ip:     \u279c 10.214.214.214/32 \n\ud83d\udd36 Client_33 peer         Allowed IPS  \u279c add server `s vpn ip:     \u279c 10.214.214.214/32 \n        this let 10.214.214.214/32 can use vpn tunnel.   let client can ping 10.214.214.214\n\n\nnow: \n    server can ping all client.\n    all client can ping server node \n    but. client can not ping other client.\n        if you need allow client ping client.   change allowed ip on client node.\n        \ud83d\udd36 Client_11 peer         Allowed IPS  \u279c  \u279c 10.214.214.0/24\n        \ud83d\udd36 Client_22 peer         Allowed IPS  \u279c  \u279c 10.214.214.0/24\n        \ud83d\udd36 Client_33 peer         Allowed IPS  \u279c  \u279c 10.214.214.0/24 \n            this allow 10.214.214.0/24 use vpn tunnel. in client node.\n                so when you ping 10.214.214.0/24  in client node.\n                    client node will forward 10.214.214.0/24 to vpn server. \n                        vpn server. can ping all node.\n                            so client can ping other node. \n\n\n        \ud83d\udd25 no need change server peer Allowed IPS\n            peer under vpn server.\n            only decide what client. vpn server can ping out.\n")),(0,l.kt)("p",null,"\ud83d\udd35 homelab vlan "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"client_11  have vlan_11 \nclient_22  have vlan_22 \nserver     need visit vlan_11 under client_11\n\nvlan_11 is under client_11. \nclient_11 of course can visit vlan_11. \n\nall need todo is give server a route:  let vlan_11 use vpn tunnel.\nand let sever send vlan_11 traffic to client_11 node.\n\n\njust config server `s client_11 `s peer. \nadd a allowed ips like \nallowed ips = 172.16.1.0/24\n    now server can ping 172.16.1.0/24\n")))}d.isMDXComponent=!0}}]);