"use strict";(self.webpackChunkblog_never_del=self.webpackChunkblog_never_del||[]).push([[8488],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>c});var a=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=a.createContext({}),u=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=u(e.components);return a.createElement(s.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=u(t),c=o,f=d["".concat(s,".").concat(c)]||d[c]||m[c]||r;return t?a.createElement(f,i(i({ref:n},p),{},{components:t})):a.createElement(f,i({ref:n},p))}));function c(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,i=new Array(r);i[0]=d;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var u=2;u<r;u++)i[u]=t[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},3422:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var a=t(7462),o=(t(7294),t(3905));const r={sidebar_position:4930,title:"\ud83c\udfaa\ud83c\udfaa\ud83c\udfaa\ud83c\udfaa-\ud83d\udd10\ud83d\udd10\ud83d\udd10 SSO \u279c Authelia install"},i="SSO Authelia",l={unversionedId:"\ud83c\udfaa\ud83c\udfaa\ud83c\udfaa\ud83c\udfaa-\ud83d\udd10\ud83d\udd10\ud83d\udd10 SSO \u279c Authelia",id:"\ud83c\udfaa\ud83c\udfaa\ud83c\udfaa\ud83c\udfaa-\ud83d\udd10\ud83d\udd10\ud83d\udd10 SSO \u279c Authelia",title:"\ud83c\udfaa\ud83c\udfaa\ud83c\udfaa\ud83c\udfaa-\ud83d\udd10\ud83d\udd10\ud83d\udd10 SSO \u279c Authelia install",description:"\ud83d\udd35 file",source:"@site/docs/\ud83c\udfaa\ud83c\udfaa\ud83c\udfaa\ud83c\udfaa-\ud83d\udd10\ud83d\udd10\ud83d\udd10 SSO \u279c Authelia.md",sourceDirName:".",slug:"/\ud83c\udfaa\ud83c\udfaa\ud83c\udfaa\ud83c\udfaa-\ud83d\udd10\ud83d\udd10\ud83d\udd10 SSO \u279c Authelia",permalink:"/\ud83c\udfaa\ud83c\udfaa\ud83c\udfaa\ud83c\udfaa-\ud83d\udd10\ud83d\udd10\ud83d\udd10 SSO \u279c Authelia",draft:!1,tags:[],version:"current",sidebarPosition:4930,frontMatter:{sidebar_position:4930,title:"\ud83c\udfaa\ud83c\udfaa\ud83c\udfaa\ud83c\udfaa-\ud83d\udd10\ud83d\udd10\ud83d\udd10 SSO \u279c Authelia install"},sidebar:"defaultSidebar",previous:{title:"\ud83c\udfaa\ud83c\udfaa\ud83c\udfaa\ud83c\udfaa-\ud83d\udd10\ud83d\udd10 Auth \u279c\u279c radius",permalink:"/\ud83c\udfaa\ud83c\udfaa\ud83c\udfaa\ud83c\udfaa-\ud83d\udd10\ud83d\udd10 Auth \u279c\u279c Radius"},next:{title:"\ud83c\udfaa\ud83c\udfaa\ud83c\udfaa\ud83c\udfaa-\ud83d\udd10\ud83d\udd10\ud83d\udd10 SSO \u279c\u279c Authelia USE",permalink:"/\ud83c\udfaa\ud83c\udfaa\ud83c\udfaa\ud83c\udfaa-\ud83d\udd10\ud83d\udd10\ud83d\udd10 SSO \u279c\u279c Authelia Use"}},s={},u=[],p={toc:u};function m(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"sso-authelia"},"SSO Authelia"),(0,o.kt)("p",null,"\ud83d\udd35 file "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"\ud83d\udd36 Offical config manual \n\nhttps://www.authelia.com/configuration/\n\n\n\ud83d\udd36 docker - compose \n\nhttps://github.com/authelia/authelia/blob/master/examples/compose/lite/docker-compose.yml\n")),(0,o.kt)("p",null,"\ud83d\udd35 prepair "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"authelia is for something like traefik.\nyou better config traefik first. and enable ssl.\n\nyou need like openldap too. \n\ndomain. & SSL. \n")),(0,o.kt)("p",null,"\ud83d\udd35 Authelia Docker needs."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"1. redis    - must \n2. database - option \n    Authelia have buildin database  sqlite3.\n")),(0,o.kt)("p",null,"\ud83d\udd35 email / verify / 2FA "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"every user first login authelia need use 2FA verify.\nset 2FA means. must set email first.\n\n\n\ud83d\udd36 send & receive email \n\n    how sender  email:   use email`s smtp. function.  \u279c in authelia config \n    who receive emial:   config email for login user. \u279c in ldap / of file. \n\n\n\ud83d\udd36 gmail smtp \n\n    very easy.  just need email address and a app password.\n    \u203c\ufe0f must login google create a app password. email password no work \u203c\ufe0f\n    \u203c\ufe0f must login google create a app password. email password no work \u203c\ufe0f\n    \u203c\ufe0f must login google create a app password. email password no work \u203c\ufe0f\n\n\n\ud83d\udd36 how verify \n\n    1. authelia  send out a email.\n    2. ldap user receive a email\n    3. ldap get a link from email. \n        link have two parts.\n            one: paste link to 2fa app like google auth... or  bitwarden. to get password.\n            one: type password back to verify.\n")),(0,o.kt)("p",null,"\ud83d\udd35 Config must know "),(0,o.kt)("p",null,"\ud83d\udd36 authelia URL  \u2705"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"default_redirection_url: https://auth.0214.icu \n    authelia need a url to work.\n        auth.domain  sso.domain  any name you like. \n        if you have a port to visit authelia. add it behind.\n                https://xxx.0214.icu:yyy\n")),(0,o.kt)("p",null,"\ud83d\udd36 default rule "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"access_control:\n    default_policy: deny\n\n        authelia should like firewall. \n        deny all incoming request by default.\n        but we need allow the app (who use authelia)\n\n    -  bypass       \u279c  no need password \n    -  one_factor   \u279c  password\n    -  two_factor   \u279c  passwor d  + 2FA\n")),(0,o.kt)("p",null,"\ud83d\udd36 Auth method:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"authentication_backend:\n    file:  \u279c means you choose file to auth user.\n    ldap:  \u279c means you choose ldap to auth user.\n\nif file: \n    need create a new file. \n    input user * passwor in that file. \n        \ud83d\udd25     https://github.com/authelia/authelia/tree/master/examples/compose/lite/authelia\n\nif ldap: \n    my demo .\n")),(0,o.kt)("p",null,"\ud83d\udd35 SMTP comfig \ud83d\udcaf "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"https://www.authelia.com/configuration/notifications/smtp/\n\n\nnotifier:\nsmtp:\n    username: xx2610@gmail.com \n    password: nfmthdxxxxxxx\n    sender: xx2610@gmail.com\n    host: smtp.gmail.com\n    port: 587\n\n\n\u203c\ufe0f password is not email password. it is google app passowr \u203c\ufe0f\n\u203c\ufe0f password is not email password. it is google app passowr \u203c\ufe0f\n\u203c\ufe0f password is not email password. it is google app passowr \u203c\ufe0f\n")),(0,o.kt)("p",null,"\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35  docker compose \u2705"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"DBredis:\n    container_name: DB-Redis\n    image: 'bitnami/redis:latest'\n    ports:\n        - \"6379:6379\"\n    environment:\n        - ALLOW_EMPTY_PASSWORD=yes\n    volumes:\n        - /mnt/dpnvme/DMGS-DKP/DB-Redis:/bitnami\n            # need set host folder permit like 777\n            # default puid is like 1001. \n\nAUTHauthelia:\n    container_name: Auth-SSO-Authelia\n    image: authelia/authelia:latest\n    restart: unless-stopped\n    ports:\n        - 9091:9091\n    volumes:\n        - /mnt/dpnvme/DMGS-DKP/Auth-SSO-Authelia:/config\n    depends_on:\n        - DBredis\n")),(0,o.kt)("p",null,"\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35  config demo \ud83d\udcaf \u2705"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'    # yamllint disable rule:comments-indentation\n    ---\n    ###############################################################################\n    #                           Authelia Configuration                            #\n    ###############################################################################\n\n    theme: light #light/dark\n    jwt_secret: 7tiqSgZY8kb8JthmoVoHWja2 \n    #any text or number you want to add here to create jwt Token\n    default_redirection_url: https://auth.0214.icu   # \u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\n    server:\n    host: 0.0.0.0\n    port: 9091\n    path: ""\n    read_buffer_size: 4096\n    write_buffer_size: 4096\n    enable_pprof: false\n    enable_expvars: false\n    disable_healthcheck: false\n    tls:\n        key: ""\n        certificate: ""\n\n    log:\n    level: debug\n\n    totp:\n    issuer: 0214.icu        # \u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f  no any port. just main domain.   not sub domain\n    period: 30\n    skew: 1\n\n    authentication_backend:\n    ldap:\n        implementation: custom\n        url: ldap://openldap\n        # \u2b50\ufe0f must \n        # if in same docker network. can use dns name. \n        # 389 is default port.\n        timeout: 5s\n        start_tls: false\n        tls:\n        server_name: ldap.example.com\n        skip_verify: false\n        minimum_version: TLS1.2\n        base_dn: OU=OU-SSO-Authelia,DC=rv,DC=ark\n        # \u2b50\ufe0f DC=rv,DC=ark                    \u279c this allow all domain user login to authelia.\n        # \u2b50\ufe0f OU=OU-SSO-Authelia,DC=rv,DC=ark \u279c this only allow user under OU-SSO-Authelia can login authelia\n        users_filter: (&({username_attribute}={input})(objectClass=person))\n        username_attribute: uid\n        mail_attribute: mail\n        display_name_attribute: displayName\n        groups_filter: (&(member={dn})(objectClass=groupOfNames))\n        group_name_attribute: cn\n        permit_referrals: false\n        permit_unauthenticated_bind: false\n        user: CN=admin,DC=rv,DC=ark\n        # \u2b50\ufe0f cn just use admin. no change; \n        password: Ys\n        # \u2b50\ufe0f domain admin `s password\n\n        # \u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f openldap. username must not include . \u279c xxyy ok     xx.yy no ok. \n        # \u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f openldap. username must not include . \u279c xxyy ok     xx.yy no ok. \n        # \u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f openldap. username must not include . \u279c xxyy ok     xx.yy no ok. \n\n\n    access_control:\n    default_policy: deny\n\n    rules:\n        ## bypass rule\n        - domain: "auth.0214.icu" # \u2b50\ufe0f\u2b50\ufe0f he url that authelia itself use.  no port.\n        policy: bypass\n        - domain: \n        - "dashy.0214.icu"      #\u2b50\ufe0f\u2b50\ufe0fxample domain to protect no port.\n        - "jumpserver.0214.icu" #\u2b50\ufe0f\u2b50\ufe0fexample domain to protect no port.\n        policy: one_factor\n        - domain: \n        - "dsm.0214.icu"        #\u2b50\ufe0f\u2b50\ufe0fexample subdomain to protec no port.\n        - "dvm.0214.icu"        #\u2b50\ufe0f\u2b50\ufe0fxample subdomain to protect no port.\n        policy: two_factor\n\n    session:\n    name: authelia_session\n    secret: unsecure_session_secret #any text or number you want to add here to create jwt Token\n    expiration: 3600  # 1 hour\n    inactivity: 300  # 5 minutes\n    domain: 0214.icu  # \u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f  no port.  main domain. \n\n    regulation:\n    max_retries: 3\n    find_time: 10m\n    ban_time: 12h\n\n    storage:\n    local:\n        path: /config/db.sqlite3          # can use MySQL too\n    encryption_key: tujXiHx2ety6HRErqquML35m # encryption  database info\n    \n\n    notifier:\n    smtp:\n        username: xx2610@gmail.com \n        password: nfmthdxnopxx\n        sender: xx2610@gmail.com\n        host: smtp.gmail.com\n        port: 587\n')))}m.isMDXComponent=!0}}]);