"use strict";(self.webpackChunkblog_never_del=self.webpackChunkblog_never_del||[]).push([[625],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>d});var o=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=o.createContext({}),l=function(e){var n=o.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},p=function(e){var n=l(e.components);return o.createElement(c.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},u=o.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=l(t),d=a,f=u["".concat(c,".").concat(d)]||u[d]||m[d]||r;return t?o.createElement(f,s(s({ref:n},p),{},{components:t})):o.createElement(f,s({ref:n},p))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,s=new Array(r);s[0]=u;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i.mdxType="string"==typeof e?e:a,s[1]=i;for(var l=2;l<r;l++)s[l]=t[l];return o.createElement.apply(null,s)}return o.createElement.apply(null,t)}u.displayName="MDXCreateElement"},1277:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>m,frontMatter:()=>r,metadata:()=>i,toc:()=>l});var o=t(7462),a=(t(7294),t(3905));const r={sidebar_position:2930,title:"\ud83c\udfaa\ud83c\udfaa\ud83d\udc2c\u2638\ufe0f\u2638\ufe0f0\ufe0f\u20e3 K8s \u279c Misc.9"},s="K8s Misc",i={unversionedId:"\ud83c\udfaa\ud83c\udfaa \ud83d\udc2c\u2638\ufe0f\u2638\ufe0f-0\ufe0f\u20e3 K8s \u279c Basic.9 Misc",id:"\ud83c\udfaa\ud83c\udfaa \ud83d\udc2c\u2638\ufe0f\u2638\ufe0f-0\ufe0f\u20e3 K8s \u279c Basic.9 Misc",title:"\ud83c\udfaa\ud83c\udfaa\ud83d\udc2c\u2638\ufe0f\u2638\ufe0f0\ufe0f\u20e3 K8s \u279c Misc.9",description:"\ud83d\udd35 POD Config",source:"@site/docs/\ud83c\udfaa\ud83c\udfaa \ud83d\udc2c\u2638\ufe0f\u2638\ufe0f-0\ufe0f\u20e3 K8s \u279c Basic.9 Misc.md",sourceDirName:".",slug:"/\ud83c\udfaa\ud83c\udfaa \ud83d\udc2c\u2638\ufe0f\u2638\ufe0f-0\ufe0f\u20e3 K8s \u279c Basic.9 Misc",permalink:"/\ud83c\udfaa\ud83c\udfaa \ud83d\udc2c\u2638\ufe0f\u2638\ufe0f-0\ufe0f\u20e3 K8s \u279c Basic.9 Misc",draft:!1,tags:[],version:"current",sidebarPosition:2930,frontMatter:{sidebar_position:2930,title:"\ud83c\udfaa\ud83c\udfaa\ud83d\udc2c\u2638\ufe0f\u2638\ufe0f0\ufe0f\u20e3 K8s \u279c Misc.9"},sidebar:"defaultSidebar",previous:{title:"\ud83c\udfaa\ud83c\udfaa\ud83d\udc2c\u2638\ufe0f\u2638\ufe0f0\ufe0f\u20e3 K8s \u279c Basic",permalink:"/\ud83c\udfaa\ud83c\udfaa \ud83d\udc2c\u2638\ufe0f\u2638\ufe0f-0\ufe0f\u20e3 K8s \u279c Basic.1"},next:{title:"\ud83c\udfaa\ud83c\udfaa\ud83d\udc2c\u2638\ufe0f\u2638\ufe0f1\ufe0f\u20e3 Helm \u279c Basic",permalink:"/\ud83c\udfaa\ud83c\udfaa \ud83d\udc2c\u2638\ufe0f\u2638\ufe0f-1\ufe0f\u20e3 Helm \u279c Basic"}},c={},l=[],p={toc:l};function m(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,o.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"k8s-misc"},"K8s Misc"),(0,a.kt)("p",null,"\ud83d\udd35 POD Config"),(0,a.kt)("p",null,"  \ud83d\udd36 spec\nspec-pod        (podname;                      volumes:disk mount to container; )\nspec-containers ( Container name;  image url;  export port; mount out path)"),(0,a.kt)("p",null,"  \ud83d\udd36 metadata"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"  name        \u279c pod name\n  namespace   \u279c set namespace.    \u203c\ufe0f default namespace is: default \u203c\ufe0f\n  labels      \u279c set label\n  annotaton   \u279c set note \n")),(0,a.kt)("p",null,"  \ud83d\udd36 name space"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"not use k8s default namespace if possible.\nnamespace is how you category all your dockeres.\n\n  NS-Prod\n  NS-Test\n  NS-AIO\n")),(0,a.kt)("p",null,"  \ud83d\udd36 Labels"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"label-version\nlabel-prod/test \nlabel-web/sql/app\nlabel-tool\n")),(0,a.kt)("p",null,"\ud83d\udd35 Ingress "),(0,a.kt)("p",null,"  \ud83d\udd36 Needs "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Ingre allow outside user. visit service inside cluster. \n  NodePort need use host node port, the port on host is limited!\n  so need something better: Ingress \n")),(0,a.kt)("p",null,"  \ud83d\udd36 Desc "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"service use tcp/udp.\ningress use http/https \n\nif need use ingress.  have to install ingress controller first.\nlike nginx ingress controller.\n")),(0,a.kt)("p",null,"\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35  K8s  basic "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"https://www.qikqiak.com/k8s-book/\nhttps://www.qikqiak.com/k8s-book/\nhttps://www.qikqiak.com/k8s-book/\n")),(0,a.kt)("p",null,"\ud83d\udd35 deployment / backup "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"you can deploy pod use kubectl create -f pod.yaml\nbut you use k8s.  the pod must be important.\nyou need at least run two pod at same time.\nin case one pod down. k8s will switch to use another one \njust like back up. \n\n\n    apiVersion: apps/v1\n    kind: Deployment\n    spec:\n    replicas: 2\n")),(0,a.kt)("p",null,"\ud83d\udd35 RC:  Replication Controller"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"auto increase/decrease pod number for you.\nwhen pod load is too heavy. \nit auto deploy another for you. \n")),(0,a.kt)("p",null,"\ud83d\udd35 static pod "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"by default k8s auto assign a node for pod.\nbut sometimes you want some pod run on a fixed node.\nthan use this. \n")),(0,a.kt)("p",null,"\ud83d\udd35 service "),(0,a.kt)("p",null,"\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35 ConfigMap\n\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35 ConfigMap\n\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35 ConfigMap "),(0,a.kt)("p",null,"\ud83d\udd35 why "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"docker          \u279c cmd line.\ndocker compose  \u279c docker-compose.yaml \nk8s             \u279c ConfigMap\n")),(0,a.kt)("p",null,"\ud83d\udd35 Desc "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"docker config  need prepair before start container.\nk8s  configmap need prepair before start pod\n\n\nall config you need mount in docker;   you can add to configmap.\n\nconfigmap is a folder. \n    you can let one  pod use one  configmap file.\n    you can let many pod use same configmap file. \n\n\npod will search all configmap file. \nif found something for himself. pod will auto use it. (no need restart!)\n\n\nusually \n    if a pod need very much   config.    create a configmap file for it. \n    if a pod need very little config .   use same configmap file with other pod.\n")),(0,a.kt)("p",null,"\ud83d\udd35 configmap vs config "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"you can create configmap from config file.\n    but configmap is not config file \n    but configmap is not config file \n    but configmap is not config file \n\nduring import/create it will add some line to head & end\n\n    kubectl describe cm custom-dashy.yaml\n    Name:         custom-dashy.yaml\n    Namespace:    default\n    Labels:       <none>\n    Annotations:  <none>\n")),(0,a.kt)("p",null,"\ud83d\udd35 How use configmap in pod.yaml"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"spec.env      \u279c can give a diff name for pair.\nspec.envFrom  \u279c no change name \nspec.volumes  \u279c \n\n\nconfigMapKeyRef  \u279c must choose configmap & choose key.\nconfigMapRef     \u279c only choose configmap . no need choose key \n")),(0,a.kt)("p",null,"\ud83d\udd35 configmap \u279c evn demo \u2705"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'[root@localhost ~]# vim demo.yaml\napiVersion: v1  \nkind: ConfigMap               # \ud83d\udd25 \nmetadata:\nname: cm-podxx              # \ud83d\udd25 ConfigMap name.   pod need this name to use this caonfigmap\ndata:                         # \ud83d\udd25 all list under data is what we set.\nhostname: "k8s"             # Key: hostname   value: k8s\npassword: "123"             # Key: password   value: 123\n---\napiVersion: v1\nkind: Pod\nmetadata:\nname: zhangsan\nspec:\ncontainers:\n- name: zhangsan\n    image: busybox\n\n    env:                         # \ud83d\udd25 use env type\n    - name: env-podxx-HostName   # \ud83d\udd25 set a env name. any name \n    valueFrom:\n        configMapKeyRef:         # use configmap.\n        name: cm-podxx            # \ud83d\udd25 choose ConfigMap name;  must same with the name in configmap.\n        key: hostname             # \ud83d\udd25 choose what key to use; must same with the name in configmap.\n                                    # \ud83d\udd25 no need set value -.-.  \n\n    - name: env-podxx-Password    # \ud83d\udd25 set a env name\n    valueFrom:\n        configMapKeyRef:\n        name: cm-podxx\n        key: password\n')),(0,a.kt)("p",null,"\ud83d\udd35 configmap \u279c Mount demo \u2705"),(0,a.kt)("p",null,"\ud83d\udd36 Create configmap (import conf)"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"kubectl create configmap xx                --from-file=yyyy\nkubectl create configmap cm-demo           --from-file=/root/redis.conf\nkubectl create configmap custom-dashy.yaml --from-file=/root/dashy.conf\nkubectl create configmap dashy-config --from-file=/root/dashy.conf\n")),(0,a.kt)("p",null,"\ud83d\udd36 check configmap:         \u279c kubectl get cm\n\ud83d\udd36 check  detail            \u279c kubectl describe cm xxxx"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"apiVersion: v1\nkind: Pod\nmetadata:\nname: nginx\nspec:\ncontainers:\n- name: nginx\n    image: nginx\n    ports:\n    - containerPort: 80\n    volumeMounts:\n    - name: html                        # \ud83d\udd25 use volume: must same as volumes.name\n    mountPath: /var/www/html          # \ud83d\udd25 set  intermal path\nvolumes:\n- name: html                    # \ud83d\udd25 create volume name:   must same as volumeMounts.name\n    configMap:                    # \n    name: nginx-html            # \ud83d\udd25 must same as the configmap file name in k8s. \n\n\n\n\n\n\n\n\ud83d\udd36 deployment \n\n  deploy ment can deal with serverless docker very good.\n  but not stateful docker.\n  stateful docker is most difficult part in k8s.\n  there is a lot to concern .\n")),(0,a.kt)("p",null,"\ud83d\udd35 Storage "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"    \u25ce some pod can     move beacuse they use nfs/smb \n    \u25ce some pod can not move beacuse they use rbd/iscsi \n\nrbd driver \u279c  can mount one  pod only  \u279c  \u279c can not move to other node \nnfs driver \u279c  can mount many pod       \u279c  \u279c can     move to other node \n\n\n    no need high disk performace \u279c can use nfs/smb\n    do need high disk performace \u279c must rbd/iscis\n")))}m.isMDXComponent=!0}}]);