"use strict";(self.webpackChunkblog_never_del=self.webpackChunkblog_never_del||[]).push([[327],{3905:(e,n,r)=>{r.d(n,{Zo:()=>d,kt:()=>u});var t=r(7294);function o(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function a(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function c(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?a(Object(r),!0).forEach((function(n){o(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function i(e,n){if(null==e)return{};var r,t,o=function(e,n){if(null==e)return{};var r,t,o={},a=Object.keys(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||(o[r]=e[r]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=t.createContext({}),s=function(e){var n=t.useContext(l),r=n;return e&&(r="function"==typeof e?e(n):c(c({},n),e)),r},d=function(e){var n=s(e.components);return t.createElement(l.Provider,{value:n},e.children)},k={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},p=t.forwardRef((function(e,n){var r=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),p=s(r),u=o,m=p["".concat(l,".").concat(u)]||p[u]||k[u]||a;return r?t.createElement(m,c(c({ref:n},d),{},{components:r})):t.createElement(m,c({ref:n},d))}));function u(e,n){var r=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=r.length,c=new Array(a);c[0]=p;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i.mdxType="string"==typeof e?e:o,c[1]=i;for(var s=2;s<a;s++)c[s]=r[s];return t.createElement.apply(null,c)}return t.createElement.apply(null,r)}p.displayName="MDXCreateElement"},8959:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>k,frontMatter:()=>a,metadata:()=>i,toc:()=>s});var t=r(7462),o=(r(7294),r(3905));const a={sidebar_position:2930,title:"\ud83c\udfaa\ud83c\udfaa\ud83d\udc2c Docker \u279c\u279c\u279c Swarm"},c="Docker Swarn",i={unversionedId:"\ud83c\udfaa\ud83c\udfaa \ud83d\udc2c Docker \u279c\u279c\u279c Swarm",id:"\ud83c\udfaa\ud83c\udfaa \ud83d\udc2c Docker \u279c\u279c\u279c Swarm",title:"\ud83c\udfaa\ud83c\udfaa\ud83d\udc2c Docker \u279c\u279c\u279c Swarm",description:"\ud83e\udd9a Goal",source:"@site/docs/\ud83c\udfaa\ud83c\udfaa \ud83d\udc2c Docker \u279c\u279c\u279c Swarm.md",sourceDirName:".",slug:"/\ud83c\udfaa\ud83c\udfaa \ud83d\udc2c Docker \u279c\u279c\u279c Swarm",permalink:"/\ud83c\udfaa\ud83c\udfaa \ud83d\udc2c Docker \u279c\u279c\u279c Swarm",draft:!1,tags:[],version:"current",sidebarPosition:2930,frontMatter:{sidebar_position:2930,title:"\ud83c\udfaa\ud83c\udfaa\ud83d\udc2c Docker \u279c\u279c\u279c Swarm"},sidebar:"defaultSidebar",previous:{title:"\ud83c\udfaa\ud83c\udfaa\ud83d\udc2c Docker \u279c\u279c Compose",permalink:"/\ud83c\udfaa\ud83c\udfaa \ud83d\udc2c Docker \u279c\u279c Compose"},next:{title:"\ud83c\udfaa\ud83c\udfaa\ud83d\udc2c\u2638\ufe0f Cluster \u279c MiniKube",permalink:"/\ud83c\udfaa\ud83c\udfaa \ud83d\udc2c\u2638\ufe0f Cluster \u279c MiniKube"}},l={},s=[],d={toc:s};function k(e){let{components:n,...r}=e;return(0,o.kt)("wrapper",(0,t.Z)({},d,r,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"docker-swarn"},"Docker Swarn"),(0,o.kt)("p",null,"\ud83e\udd9a Goal "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"wan:  vps  VPN.S_1214.214  \u279c swarm worker2 \nlan:  dkp  VPN.C_1214.140  \u279c swarm master\nlan:  dkt  VPN.C_1214.144  \u279c swarm worker1\n\n\n-.- use wireguard build vpn first. \n")),(0,o.kt)("p",null,"\ud83d\udd35 swam & network "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"\ud83d\udd36 manager node:   Make docker node as manager\n\n    docker swarm init --advertise-addr 10.214.214.140\n\n\n\ud83d\udd36 work node  (join to swarm)\n\n    docker swarm join --token SWMTKN-1-11a4qe1waxtyntm9g-7wr1sfz3nyn2w91tjhtt78fmg 172.16.1.140:2377\n\n\n\ud83d\udd36 Manager node: (check all nodes)\n\n    docker node ls\n\n\n\ud83d\udd36 All Node (check swarm network)\n\n    docker network ls\n    all node should have a ingress overlay network\n        7jyu8yhpb142   ingress                           overlay   swarm\n\n\n\ud83d\udd36 Manager node: (create overlay network)\n\n    docker network create -d overlay --attachable DNET-Overlay-Traefik\n\n        \u203c\ufe0f if many docker machine need use same docker network. need use overlay. \u203c\ufe0f\n        \u203c\ufe0f even use overlay. if need use between diff hosts. need use --attachable \u203c\ufe0f \n        it will auto sync to all swarm node.\n\n\n\n\ud83d\udd36 Work Node (check if network auto created )\n\n    docker network ls\n\n        \u203c\ufe0f node only create network when need it. \u203c\ufe0f\n        if need need use it.  it will auto created.\n        \ud83d\udd25 if node no need it/no docker require that network.  it will not auto created! ...  fuck\n        \ud83d\udd25 if node no need it/no docker require that network.  it will not auto created! ...  fuck\n        \ud83d\udd25 if node no need it/no docker require that network.  it will not auto created! ...  fuck\n\n\n\ud83d\udd36 test network \n\n    manager node:   docker run -dit --name alpine1 --network DNET-Overlay-Traefik alpine\n    work ndoe:      docker run -dit --name alpine2 --network DNET-Overlay-Traefik alpine\n\n        then work ndoe can see the synced network\n        Docker-Test.Root ~ docker network list\n        NETWORK ID     NAME                              DRIVER    SCOPE\n        y20sdrp0g3j2   DNET-Overlay-Traefik              overlay   swarm\n\n\n            enter alpine2 & ping alpine1\n            Docker-Test.Root ~ docker exec -it 405e8f3a6c50 ash\n")),(0,o.kt)("p",null,"\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35"),(0,o.kt)("p",null,"\ud83d\udd35 log "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'You need to ensure that the requisite network ports are open between the swarm nodes.\n\nTCP port 2377 for cluster management communications\nTCP and UDP port 7946 for communication among nodes\nUDP port 4789 for overlay network traffic\n\n\n\n\ndocker info"\n')),(0,o.kt)("p",null,"\ud83d\udd35 "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"To deploy your application across the swarm, use `docker stack deploy`.\n\ndocker compose swarm\n")),(0,o.kt)("p",null,"\ud83d\udd35 how use swarm"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"all cmd must run from manager node..\nafter worker node joined swarm.  no need login worker any more..\n\n\n\nfuck learn swarm . why not learm k8s.\nswarm is between docker compose and k8s. \nnot good .\n")))}k.isMDXComponent=!0}}]);